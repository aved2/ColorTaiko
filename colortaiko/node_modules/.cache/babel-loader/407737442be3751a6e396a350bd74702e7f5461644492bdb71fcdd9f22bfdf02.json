{"ast":null,"code":"var _jsxFileName = \"/Users/gai/Downloads/ColorTaiko/colortaiko/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dot = /*#__PURE__*/React.forwardRef(_c = ({\n  id,\n  onStartLine,\n  onEndLine\n}, ref) => /*#__PURE__*/_jsxDEV(\"div\", {\n  ref: ref,\n  className: \"dot\",\n  onMouseDown: () => onStartLine(id, ref),\n  onMouseUp: () => onEndLine(id, ref)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this));\n_c2 = Dot;\nconst App = () => {\n  _s();\n  const [topVertices, setTopVertices] = useState(3);\n  const [bottomVertices, setBottomVertices] = useState(3);\n  const [darkMode, setDarkMode] = useState(false);\n  const [lines, setLines] = useState([]);\n  const [drawing, setDrawing] = useState(false);\n  const MAX_VERTICES = 50;\n  const dotRefs = useRef([]);\n  const MIN_VERTICES = 3;\n  const svgRef = useRef(null);\n  const colors = ['purple', 'lightblue', 'green', 'red', 'orange', 'pink', 'mediumslateblue', 'mediumseagreen', 'rgb(183, 183, 244)', 'rosybrown', 'olivedrab', 'crimson', 'rgb(213, 213, 55)', 'palevioletred', 'indigo', 'coral', 'teal', 'plum', 'navy', 'yellowgreen'];\n  const Dot = /*#__PURE__*/React.forwardRef(({\n    onDotClick\n  }, ref) => /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"dot\",\n    onMouseDown: () => onDotClick(ref)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 4\n  }, this));\n  const [currentLine, setCurrentLine] = useState(null);\n  const [colorIndex, setColorIndex] = useState(0);\n  const getDotPosition = dotRef => {\n    if (!svgRef.current || !dotRef.current) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const dotRect = dotRef.current.getBoundingClientRect();\n    return {\n      x: dotRect.left + dotRect.width / 2 - svgRect.left,\n      y: dotRect.top + dotRect.height / 2 - svgRect.top\n    };\n  };\n  const handleMouseMove = e => {\n    if (!drawing) return;\n    const newPosition = {\n      x: e.clientX,\n      y: e.clientY\n    };\n    setLines(prevLines => {\n      return prevLines.map(line => {\n        if (line.startVertexId === currentDotId || line.endVertexId === currentDotId) {\n          return {\n            ...line /* updated position */\n          };\n        }\n        return line;\n      });\n    });\n  };\n  const handleMouseUp = () => {\n    setDrawing(false);\n  };\n  const undoLastLine = () => {\n    setLines(lines.slice(0, -1));\n  };\n  const startLine = event => {\n    if (drawing) return;\n    setDrawing(true);\n    const rect = svgRef.current.getBoundingClientRect();\n    const newLine = {\n      x1: event.clientX - rect.left,\n      y1: event.clientY - rect.top,\n      x2: event.clientX - rect.left,\n      y2: event.clientY - rect.top,\n      color: colors[colorIndex]\n    };\n    setCurrentLine(newLine);\n  };\n  const createLine = event => {\n    if (!drawing) return;\n    const rect = svgRef.current.getBoundingClientRect();\n    setCurrentLine(prevLine => ({\n      ...prevLine,\n      x2: event.clientX - rect.left,\n      y2: event.clientY - rect.top\n    }));\n  };\n\n  //  const updateVertexPosition = (vertexId, newPosition) => {\n  //   setVertices(currentVertices =>\n  //     currentVertices.map(vertex =>\n  //       vertex.id === vertexId ? { ...vertex, position: newPosition } : vertex\n  //     )\n  //   );\n  // };\n\n  // const renderLines = () => {\n  //   return lines.map((line, index) => {\n  //     const startVertex = vertices.find(vertex => vertex.id === line.startVertexId);\n  //     const endVertex = vertices.find(vertex => vertex.id === line.endVertexId);\n\n  //     return startVertex && endVertex ? (\n  //       <line\n  //         key={index}\n  //         x1={startVertex.position.x}\n  //         y1={startVertex.position.y}\n  //         x2={endVertex.position.x}\n  //         y2={endVertex.position.y}\n  //         stroke=\"black\"\n  //         strokeWidth=\"2\"\n  //       />\n  //     ) : null;\n  //   });\n  // };\n\n  // const startLineFromVertex = (startVertexId) => {\n  //   const newLine = { startVertexId, endVertexId: null }; \n  //   setLines(currentLines => [...currentLines, newLine]);\n  // };\n\n  // const completeLineAtVertex = (endVertexId) => {\n  //   setLines(currentLines => {\n  //     const updatedLines = [...currentLines];\n  //     if (updatedLines.length > 0) {\n  //       const lastLine = updatedLines[updatedLines.length - 1];\n  //       lastLine.endVertexId = endVertexId; \n  //     }\n  //     return updatedLines;\n  //   });\n  // };\n\n  const handleDragStart = index => {\n    setDrawing(true); // Assume drawing state is used to track dragging\n    // Logic to identify and store the initial position of the dragged dot\n    const dot = dotRefs.current[index];\n    const initialPosition = {\n      x: dot.offsetLeft,\n      y: dot.offsetTop\n    };\n    setCurrentLine({\n      ...currentLine,\n      start: initialPosition\n    }); // Set up a new line starting from this dot\n  };\n  const endLine = () => {\n    if (!drawing) return;\n    setLines(prevLines => [...prevLines, currentLine]);\n    setCurrentLine(null);\n    setDrawing(false);\n    setColorIndex(prevIndex => (prevIndex + 1) % colors.length);\n  };\n  useEffect(() => {\n    dotRefs.current = dotRefs.current.slice(0, topVertices + bottomVertices);\n  }, [topVertices, bottomVertices]);\n  const handleDotClick = index => {\n    const dot = dotRefs.current[index];\n    if (!dot) return;\n    const rect = dot.getBoundingClientRect();\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const position = {\n      x: rect.left + rect.width / 2 - svgRect.left,\n      y: rect.top + rect.height / 2 - svgRect.top\n    };\n    if (lines.length && !lines[lines.length - 1].end) {\n      setLines(lines => [...lines.slice(0, -1), {\n        ...lines[lines.length - 1],\n        end: position\n      }]);\n    } else {\n      setLines(lines => [...lines, {\n        start: position,\n        end: null\n      }]);\n    }\n  };\n  const renderDots = (count, offset) => {\n    return Array.from({\n      length: count\n    }, (_, index) => /*#__PURE__*/_jsxDEV(Dot, {\n      ref: el => dotRefs.current[offset + index] = el // Ensure the ref is correctly assigned\n      ,\n      onDotClick: () => handleDotClick(offset + index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 6\n    }, this));\n  };\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${darkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"preconnect\",\n        href: \"https://fonts.googleapis.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"preconnect\",\n        href: \"https://fonts.gstatic.com\",\n        crossorigin: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        href: \"https://fonts.googleapis.com/css2?family=DotGothic16&display=swap\",\n        rel: \"stylesheet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ColorTaiko!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"top-vertices\",\n          children: \"Top Vertices:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"top-vertices\",\n          value: topVertices,\n          min: MIN_VERTICES,\n          max: MAX_VERTICES,\n          maxLength: 2,\n          onChange: e => {\n            const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n            setTopVertices(newValue);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTopVertices(Math.min(topVertices + 1, MAX_VERTICES)),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTopVertices(Math.max(topVertices - 1, MIN_VERTICES)),\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bottom-vertices\",\n          children: \"Bottom Vertices:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"bottom-vertices\",\n          type: \"number\",\n          value: bottomVertices,\n          min: MIN_VERTICES,\n          max: MAX_VERTICES,\n          maxLength: 2,\n          onChange: e => {\n            const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n            setBottomVertices(newValue);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setBottomVertices(Math.min(bottomVertices + 1, MAX_VERTICES)),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setBottomVertices(Math.max(bottomVertices - 1, MIN_VERTICES)),\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vertices-container\",\n        children: renderDots(topVertices, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vertices-container\",\n        style: {\n          marginTop: '100px'\n        },\n        children: renderDots(bottomVertices, topVertices)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        },\n        children: lines.map((line, index) => line.end && /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: line.start.x,\n          y1: line.start.y,\n          x2: line.end.x,\n          y2: line.end.y,\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 12\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"undoButton\",\n      onClick: undoLastLine,\n      children: \"Undo Last Line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"modeSwitch\",\n      onClick: toggleDarkMode,\n      children: darkMode ? 'Light Mode' : 'Dark Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 4\n  }, this);\n};\n_s(App, \"UIbeK13ppYQzXg3prW4zp3KNJKE=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Dot$React.forwardRef\");\n$RefreshReg$(_c2, \"Dot\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Dot","forwardRef","_c","id","onStartLine","onEndLine","ref","className","onMouseDown","onMouseUp","fileName","_jsxFileName","lineNumber","columnNumber","_c2","App","_s","topVertices","setTopVertices","bottomVertices","setBottomVertices","darkMode","setDarkMode","lines","setLines","drawing","setDrawing","MAX_VERTICES","dotRefs","MIN_VERTICES","svgRef","colors","onDotClick","currentLine","setCurrentLine","colorIndex","setColorIndex","getDotPosition","dotRef","current","x","y","svgRect","getBoundingClientRect","dotRect","left","width","top","height","handleMouseMove","e","newPosition","clientX","clientY","prevLines","map","line","startVertexId","currentDotId","endVertexId","handleMouseUp","undoLastLine","slice","startLine","event","rect","newLine","x1","y1","x2","y2","color","createLine","prevLine","handleDragStart","index","dot","initialPosition","offsetLeft","offsetTop","start","endLine","prevIndex","length","handleDotClick","position","end","renderDots","count","offset","Array","from","_","el","toggleDarkMode","children","rel","href","crossorigin","onMouseMove","htmlFor","value","min","max","maxLength","onChange","newValue","Math","parseInt","target","onClick","type","style","marginTop","stroke","strokeWidth","_c3","$RefreshReg$"],"sources":["/Users/gai/Downloads/ColorTaiko/colortaiko/src/App.js"],"sourcesContent":["import React, { useState ,useRef, useEffect} from 'react';\nimport './App.css';\nconst Dot = React.forwardRef(({ id, onStartLine, onEndLine }, ref) => (\n  <div \n    ref={ref} \n    className=\"dot\"\n    onMouseDown={() => onStartLine(id, ref)} \n    onMouseUp={() => onEndLine(id, ref)}\n  ></div>\n));\n\n\n\nconst App = () => {\n const [topVertices, setTopVertices] = useState(3);\n const [bottomVertices, setBottomVertices] = useState(3);\n const [darkMode, setDarkMode] = useState(false);\n const [lines, setLines] = useState([]); \n const [drawing, setDrawing] = useState(false);\n const MAX_VERTICES = 50;\n const dotRefs = useRef([]);\n const MIN_VERTICES = 3;\n const svgRef = useRef(null);\n const colors = ['purple', 'lightblue', 'green', 'red', 'orange', 'pink', 'mediumslateblue', 'mediumseagreen', 'rgb(183, 183, 244)', 'rosybrown', 'olivedrab', 'crimson', 'rgb(213, 213, 55)', 'palevioletred', 'indigo', 'coral', 'teal', 'plum', 'navy', 'yellowgreen'];\n const Dot = React.forwardRef(({ onDotClick }, ref) => (\n   <div ref={ref} className=\"dot\" onMouseDown={() => onDotClick(ref)}></div>\n ));\n\n\n const [currentLine, setCurrentLine] = useState(null);\n const [colorIndex, setColorIndex] = useState(0);\n\n const getDotPosition = (dotRef) => {\n   if (!svgRef.current || !dotRef.current) {\n     return { x: 0, y: 0 };\n   }\n    const svgRect = svgRef.current.getBoundingClientRect();\n   const dotRect = dotRef.current.getBoundingClientRect();\n   return {\n     x: dotRect.left + dotRect.width / 2 - svgRect.left, \n     y: dotRect.top + dotRect.height / 2 - svgRect.top \n   };\n };\n\n\n\n\n\n\n\n const handleMouseMove = (e) => {\n  if (!drawing) return;\n\n  const newPosition = { x: e.clientX, y: e.clientY };\n\n  setLines((prevLines) => {\n    return prevLines.map((line) => {\n      if (line.startVertexId === currentDotId || line.endVertexId === currentDotId) {\n        return { ...line, /* updated position */ };\n      }\n      return line;\n    });\n  });\n};\n\n  const handleMouseUp = () => {\n   setDrawing(false);\n };\n  const undoLastLine = () => {\n   setLines(lines.slice(0, -1));\n };\n\n\n\n\n\n\n\n\n const startLine = (event) => {\n   if (drawing) return;\n   setDrawing(true);\n   const rect = svgRef.current.getBoundingClientRect();\n   const newLine = {\n     x1: event.clientX - rect.left,\n     y1: event.clientY - rect.top,\n     x2: event.clientX - rect.left,\n     y2: event.clientY - rect.top,\n     color: colors[colorIndex]\n   };\n   setCurrentLine(newLine);\n };\n\n\n const createLine = (event) => {\n   if (!drawing) return;\n   const rect = svgRef.current.getBoundingClientRect();\n   setCurrentLine(prevLine => ({\n     ...prevLine,\n     x2: event.clientX - rect.left,\n     y2: event.clientY - rect.top\n   }));\n };\n\n\n\n//  const updateVertexPosition = (vertexId, newPosition) => {\n//   setVertices(currentVertices =>\n//     currentVertices.map(vertex =>\n//       vertex.id === vertexId ? { ...vertex, position: newPosition } : vertex\n//     )\n//   );\n// };\n\n// const renderLines = () => {\n//   return lines.map((line, index) => {\n//     const startVertex = vertices.find(vertex => vertex.id === line.startVertexId);\n//     const endVertex = vertices.find(vertex => vertex.id === line.endVertexId);\n\n//     return startVertex && endVertex ? (\n//       <line\n//         key={index}\n//         x1={startVertex.position.x}\n//         y1={startVertex.position.y}\n//         x2={endVertex.position.x}\n//         y2={endVertex.position.y}\n//         stroke=\"black\"\n//         strokeWidth=\"2\"\n//       />\n//     ) : null;\n//   });\n// };\n \n// const startLineFromVertex = (startVertexId) => {\n//   const newLine = { startVertexId, endVertexId: null }; \n//   setLines(currentLines => [...currentLines, newLine]);\n// };\n\n// const completeLineAtVertex = (endVertexId) => {\n//   setLines(currentLines => {\n//     const updatedLines = [...currentLines];\n//     if (updatedLines.length > 0) {\n//       const lastLine = updatedLines[updatedLines.length - 1];\n//       lastLine.endVertexId = endVertexId; \n//     }\n//     return updatedLines;\n//   });\n// };\n\nconst handleDragStart = (index) => {\n  setDrawing(true); // Assume drawing state is used to track dragging\n  // Logic to identify and store the initial position of the dragged dot\n  const dot = dotRefs.current[index];\n  const initialPosition = { x: dot.offsetLeft, y: dot.offsetTop };\n  setCurrentLine({ ...currentLine, start: initialPosition }); // Set up a new line starting from this dot\n};\n\n\n\n\n const endLine = () => {\n   if (!drawing) return;\n   setLines(prevLines => [...prevLines, currentLine]);\n   setCurrentLine(null);\n   setDrawing(false);\n   setColorIndex((prevIndex) => (prevIndex + 1) % colors.length);\n };\n\n\n useEffect(() => {\n   dotRefs.current = dotRefs.current.slice(0, topVertices + bottomVertices);\n }, [topVertices, bottomVertices]);\n\n\n\n\n\n\n const handleDotClick = (index) => {\n   const dot = dotRefs.current[index];\n   if (!dot) return; \n    const rect = dot.getBoundingClientRect();\n   const svgRect = svgRef.current.getBoundingClientRect();\n   const position = { x: rect.left + rect.width / 2 - svgRect.left, y: rect.top + rect.height / 2 - svgRect.top };\n    if (lines.length && !lines[lines.length - 1].end) {\n     setLines(lines => [...lines.slice(0, -1), { ...lines[lines.length - 1], end: position }]);\n   } else {\n     setLines(lines => [...lines, { start: position, end: null }]);\n   }\n };\n\n\n const renderDots = (count, offset) => {\n   return Array.from({ length: count }, (_, index) => (\n     <Dot\n       key={index}\n       ref={el => dotRefs.current[offset + index] = el} // Ensure the ref is correctly assigned\n       onDotClick={() => handleDotClick(offset + index)}\n     />\n   ));\n };\n\n\n\n\n const toggleDarkMode = () => {\n   setDarkMode(!darkMode);\n };\n\n\n return (\n   <div className={`App ${darkMode ? 'dark-mode' : ''}`}>\n     <header>\n       <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n       <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n       <link href=\"https://fonts.googleapis.com/css2?family=DotGothic16&display=swap\" rel=\"stylesheet\" />\n     </header>\n     <div className=\"title\">\n       <h1>ColorTaiko!</h1>\n     </div>\n     <div className=\"container\" onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}>\n       <div className=\"input-container\">\n         <label htmlFor=\"top-vertices\">Top Vertices:</label>\n         <input\n           id=\"top-vertices\"\n           value={topVertices}\n           min={MIN_VERTICES}\n           max={MAX_VERTICES}\n           maxLength={2}\n           onChange={(e) => {\n             const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n             setTopVertices(newValue);\n           }}\n         />\n         <button onClick={() => setTopVertices(Math.min(topVertices + 1, MAX_VERTICES))}>+</button>\n         <button onClick={() => setTopVertices(Math.max(topVertices - 1, MIN_VERTICES))}>-</button>\n       </div>\n       <div className=\"input-container\">\n         <label htmlFor=\"bottom-vertices\">Bottom Vertices:</label>\n         <input\n           id=\"bottom-vertices\"\n           type=\"number\"\n           value={bottomVertices}\n           min={MIN_VERTICES}\n           max={MAX_VERTICES}\n           maxLength={2}\n           onChange={(e) => {\n             const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n             setBottomVertices(newValue);\n           }}\n         />\n         <button onClick={() => setBottomVertices(Math.min(bottomVertices + 1, MAX_VERTICES))}>+</button>\n         <button onClick={() => setBottomVertices(Math.max(bottomVertices - 1, MIN_VERTICES))}>-</button>\n       </div>\n       <div className=\"vertices-container\">\n         {renderDots(topVertices, 0)}\n       </div>\n       <div className=\"vertices-container\" style={{ marginTop: '100px' }}>\n         {renderDots(bottomVertices, topVertices)}\n       </div>\n       <svg ref={svgRef} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n         {lines.map((line, index) => line.end && (\n           <line key={index} x1={line.start.x} y1={line.start.y} x2={line.end.x} y2={line.end.y} stroke=\"black\" strokeWidth=\"2\" />\n         ))}\n       </svg>\n     </div>\n     <button id = 'undoButton' onClick={undoLastLine}>Undo Last Line</button>\n     <button id=\"modeSwitch\" onClick={toggleDarkMode}>{darkMode ? 'Light Mode' : 'Dark Mode'}</button>\n   </div>\n );\n}\n\n\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
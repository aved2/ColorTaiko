{"ast":null,"code":"var _jsxFileName = \"/Users/gai/Downloads/ColorTaiko/src/LargeArcEdge.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateMidpointAndTangent = (sourceX, sourceY, controlX, controlY, targetX, targetY) => {\n  const t = 0.5;\n  const midX = Math.pow(1 - t, 2) * sourceX + 2 * (1 - t) * t * controlX + Math.pow(t, 2) * targetX;\n  const midY = Math.pow(1 - t, 2) * sourceY + 2 * (1 - t) * t * controlY + Math.pow(t, 2) * targetY;\n  const tangentX = 2 * (1 - t) * (controlX - sourceX) + 2 * t * (targetX - controlX);\n  const tangentY = 2 * (1 - t) * (controlY - sourceY) + 2 * t * (targetY - controlY);\n  const angle = Math.atan2(tangentY, tangentX) * (180 / Math.PI);\n  return {\n    midX,\n    midY,\n    angle\n  };\n};\nconst LargeArcEdge = ({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  style = {},\n  isTopLine\n}) => {\n  console.log('the top line is ', isTopLine);\n  console.log(sourceX, sourceY, targetX, targetY);\n  const horizontalDistance = targetX - sourceX;\n  const verticalDistance = Math.abs(targetY - sourceY);\n  const controlX = (sourceX + targetX) / 2;\n  let controlY;\n  if (isTopLine) {\n    // If it's the top line, we bend upwards by subtracting from the smaller Y\n    controlY = Math.min(sourceY, targetY) - Math.max(50, verticalDistance / 3);\n  } else {\n    // If it's the bottom line, we bend downwards by adding to the larger Y\n    controlY = Math.max(sourceY, targetY) + Math.max(50, verticalDistance / 3);\n  }\n  const {\n    midX,\n    midY,\n    angle\n  } = calculateMidpointAndTangent(sourceX, sourceY, controlX, controlY, targetX, targetY);\n  const edgePath = `M${sourceX},${sourceY} Q ${controlX},${controlY} ${targetX},${targetY}`;\n  const arrowWidth = 25;\n  const arrowLength = 40;\n  const arrowPath = `M 0,0 L ${arrowLength},${arrowWidth / 2} L ${arrowLength - arrowWidth / 2},0 L ${arrowLength},${-arrowWidth / 2} Z`;\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      d: edgePath,\n      style: style,\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${midX},${midY}) rotate(${angle})`,\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: arrowPath,\n        fill: style.stroke || 'black'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_c = LargeArcEdge;\nexport default LargeArcEdge;\nvar _c;\n$RefreshReg$(_c, \"LargeArcEdge\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","calculateMidpointAndTangent","sourceX","sourceY","controlX","controlY","targetX","targetY","t","midX","Math","pow","midY","tangentX","tangentY","angle","atan2","PI","LargeArcEdge","style","isTopLine","console","log","horizontalDistance","verticalDistance","abs","min","max","edgePath","arrowWidth","arrowLength","arrowPath","children","d","fill","fileName","_jsxFileName","lineNumber","columnNumber","transform","stroke","_c","$RefreshReg$"],"sources":["/Users/gai/Downloads/ColorTaiko/src/LargeArcEdge.js"],"sourcesContent":["import React from 'react';\n\nconst calculateMidpointAndTangent = (sourceX, sourceY, controlX, controlY, targetX, targetY) => {\n  const t = 0.5;\n  const midX = Math.pow(1 - t, 2) * sourceX + 2 * (1 - t) * t * controlX + Math.pow(t, 2) * targetX;\n  const midY = Math.pow(1 - t, 2) * sourceY + 2 * (1 - t) * t * controlY + Math.pow(t, 2) * targetY;\n\n  const tangentX = 2 * (1 - t) * (controlX - sourceX) + 2 * t * (targetX - controlX);\n  const tangentY = 2 * (1 - t) * (controlY - sourceY) + 2 * t * (targetY - controlY);\n\n  const angle = Math.atan2(tangentY, tangentX) * (180 / Math.PI);\n\n  return { midX, midY, angle };\n};\n\nconst LargeArcEdge = ({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  style = {},\n  isTopLine\n}) => {\n\n  console.log('the top line is ', isTopLine);\n  console.log(sourceX, sourceY, targetX, targetY);\n\n  const horizontalDistance = targetX - sourceX;\n  const verticalDistance = Math.abs(targetY - sourceY);\n  const controlX = (sourceX + targetX) / 2;\n  let controlY;\n  if (isTopLine) {\n    // If it's the top line, we bend upwards by subtracting from the smaller Y\n    controlY = Math.min(sourceY, targetY) - Math.max(50, verticalDistance / 3);\n  } else {\n    // If it's the bottom line, we bend downwards by adding to the larger Y\n    controlY = Math.max(sourceY, targetY) + Math.max(50, verticalDistance / 3);\n  }\n  const { midX, midY, angle } = calculateMidpointAndTangent(sourceX, sourceY, controlX, controlY, targetX, targetY);\n\n  const edgePath = `M${sourceX},${sourceY} Q ${controlX},${controlY} ${targetX},${targetY}`;\n\n  const arrowWidth = 25;  \n  const arrowLength = 40; \n  const arrowPath = `M 0,0 L ${arrowLength},${arrowWidth / 2} L ${arrowLength - arrowWidth / 2},0 L ${arrowLength},${-arrowWidth / 2} Z`;\n\n  return (\n    <g>\n      <path d={edgePath} style={style} fill=\"none\" />\n      <g transform={`translate(${midX},${midY}) rotate(${angle})`}>\n        <path d={arrowPath} fill={style.stroke || 'black'} />\n      </g>\n    </g>\n  );\n};\n\nexport default LargeArcEdge;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
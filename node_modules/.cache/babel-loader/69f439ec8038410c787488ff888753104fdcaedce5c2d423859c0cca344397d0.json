{"ast":null,"code":"var _jsxFileName = \"/Users/anvitha.manepalli/Desktop/ColorTaiko/src/LargeArcEdge.js\";\nimport React from 'react';\nimport { getBezierPath, getMarkerEnd } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LargeArcEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  arrowHeadType,\n  markerEndId,\n  data // Added for the data object\n}) => {\n  // Implement the custom large arc drawing logic here, setting the color based on data.color\n  // Calculate the control point coordinates for the arc\n  const controlX = (sourceX + targetX) / 2;\n  const controlY = sourceY - Math.abs(targetY - sourceY) * 0.5;\n\n  // Define the path for the arc\n  const edgePath = `M${sourceX},${sourceY} Q${controlX},${controlY} ${targetX},${targetY}`;\n\n  // Get the marker end for the edge\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      id: id,\n      className: \"react-flow__edge-path\",\n      d: edgePath,\n      markerEnd: markerEnd,\n      style: {\n        ...style,\n        stroke: (data === null || data === void 0 ? void 0 : data.color) || 'black' // Use the color specified in the data object, or default to black if not specified\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: (sourceX + targetX) / 2 // Placing the label at the midpoint of the edge\n      ,\n      y: sourceY // Adjust as needed\n      ,\n      style: {\n        fill: (data === null || data === void 0 ? void 0 : data.labelColor) || '#222222',\n        // Use the label color specified in the data object, or default to black if not specified\n        fontFamily: 'Arial',\n        // Use a default font family\n        fontSize: '14px',\n        textAnchor: 'middle',\n        // Center the text horizontally\n        dominantBaseline: 'middle',\n        // Center the text vertically\n        pointerEvents: 'none' // Make the text non-interactive\n      },\n      children: data === null || data === void 0 ? void 0 : data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        zIndex: 9999\n      },\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        id: \"trashIcon\",\n        style: {\n          transform: `translate(${(sourceX + targetX) / 2 - 14.5}px, ${sourceY - 14.5}px)` // Placing the trash icon at the midpoint of the edge\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = LargeArcEdge;\nexport default LargeArcEdge;\nvar _c;\n$RefreshReg$(_c, \"LargeArcEdge\");","map":{"version":3,"names":["React","getBezierPath","getMarkerEnd","jsxDEV","_jsxDEV","Fragment","_Fragment","LargeArcEdge","id","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","arrowHeadType","markerEndId","data","controlX","controlY","Math","abs","edgePath","markerEnd","children","className","d","stroke","color","fileName","_jsxFileName","lineNumber","columnNumber","x","y","fill","labelColor","fontFamily","fontSize","textAnchor","dominantBaseline","pointerEvents","label","position","left","top","zIndex","transform","_c","$RefreshReg$"],"sources":["/Users/anvitha.manepalli/Desktop/ColorTaiko/src/LargeArcEdge.js"],"sourcesContent":["import React from 'react';\nimport { getBezierPath, getMarkerEnd } from 'react-flow-renderer';\n\nconst LargeArcEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  arrowHeadType,\n  markerEndId,\n  data, // Added for the data object\n}) => {\n  // Implement the custom large arc drawing logic here, setting the color based on data.color\n  // Calculate the control point coordinates for the arc\n  const controlX = (sourceX + targetX) / 2;\n  const controlY = sourceY - Math.abs(targetY - sourceY) * 0.5;\n\n  // Define the path for the arc\n  const edgePath = `M${sourceX},${sourceY} Q${controlX},${controlY} ${targetX},${targetY}`;\n\n  // Get the marker end for the edge\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  return (\n    <>\n      <path\n        id={id}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd={markerEnd}\n        style={{\n          ...style,\n          stroke: data?.color || 'black', // Use the color specified in the data object, or default to black if not specified\n        }}\n      />\n      <text\n        x={(sourceX + targetX) / 2} // Placing the label at the midpoint of the edge\n        y={sourceY} // Adjust as needed\n        style={{\n          fill: data?.labelColor || '#222222', // Use the label color specified in the data object, or default to black if not specified\n          fontFamily: 'Arial', // Use a default font family\n          fontSize: '14px',\n          textAnchor: 'middle', // Center the text horizontally\n          dominantBaseline: 'middle', // Center the text vertically\n          pointerEvents: 'none', // Make the text non-interactive\n        }}\n      >\n        {data?.label}\n      </text>\n      <svg style={{ position: 'absolute', left: 0, top: 0, zIndex: 9999 }}>\n        <g\n          id=\"trashIcon\"\n          style={{\n            transform: `translate(${(sourceX + targetX) / 2 - 14.5}px, ${sourceY - 14.5}px)`, // Placing the trash icon at the midpoint of the edge\n          }}\n        >\n          {/* Here you can add your SVG for the trash icon */}\n        </g>\n      </svg>\n    </>\n  );\n};\n\nexport default LargeArcEdge;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,YAAY,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElE,MAAMC,YAAY,GAAGA,CAAC;EACpBC,EAAE;EACFC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,cAAc;EACdC,cAAc;EACdC,KAAK,GAAG,CAAC,CAAC;EACVC,aAAa;EACbC,WAAW;EACXC,IAAI,CAAE;AACR,CAAC,KAAK;EACJ;EACA;EACA,MAAMC,QAAQ,GAAG,CAACV,OAAO,GAAGE,OAAO,IAAI,CAAC;EACxC,MAAMS,QAAQ,GAAGV,OAAO,GAAGW,IAAI,CAACC,GAAG,CAACV,OAAO,GAAGF,OAAO,CAAC,GAAG,GAAG;;EAE5D;EACA,MAAMa,QAAQ,GAAI,IAAGd,OAAQ,IAAGC,OAAQ,KAAIS,QAAS,IAAGC,QAAS,IAAGT,OAAQ,IAAGC,OAAQ,EAAC;;EAExF;EACA,MAAMY,SAAS,GAAGtB,YAAY,CAACc,aAAa,EAAEC,WAAW,CAAC;EAE1D,oBACEb,OAAA,CAAAE,SAAA;IAAAmB,QAAA,gBACErB,OAAA;MACEI,EAAE,EAAEA,EAAG;MACPkB,SAAS,EAAC,uBAAuB;MACjCC,CAAC,EAAEJ,QAAS;MACZC,SAAS,EAAEA,SAAU;MACrBT,KAAK,EAAE;QACL,GAAGA,KAAK;QACRa,MAAM,EAAE,CAAAV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,KAAK,KAAI,OAAO,CAAE;MAClC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACF7B,OAAA;MACE8B,CAAC,EAAE,CAACzB,OAAO,GAAGE,OAAO,IAAI,CAAE,CAAC;MAAA;MAC5BwB,CAAC,EAAEzB,OAAQ,CAAC;MAAA;MACZK,KAAK,EAAE;QACLqB,IAAI,EAAE,CAAAlB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmB,UAAU,KAAI,SAAS;QAAE;QACrCC,UAAU,EAAE,OAAO;QAAE;QACrBC,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE,QAAQ;QAAE;QACtBC,gBAAgB,EAAE,QAAQ;QAAE;QAC5BC,aAAa,EAAE,MAAM,CAAE;MACzB,CAAE;MAAAjB,QAAA,EAEDP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB;IAAK;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACP7B,OAAA;MAAKW,KAAK,EAAE;QAAE6B,QAAQ,EAAE,UAAU;QAAEC,IAAI,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAK,CAAE;MAAAtB,QAAA,eAClErB,OAAA;QACEI,EAAE,EAAC,WAAW;QACdO,KAAK,EAAE;UACLiC,SAAS,EAAG,aAAY,CAACvC,OAAO,GAAGE,OAAO,IAAI,CAAC,GAAG,IAAK,OAAMD,OAAO,GAAG,IAAK,KAAI,CAAE;QACpF;MAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAACgB,EAAA,GA9DI1C,YAAY;AAgElB,eAAeA,YAAY;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
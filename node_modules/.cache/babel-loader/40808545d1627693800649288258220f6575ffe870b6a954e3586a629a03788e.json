{"ast":null,"code":"var _jsxFileName = \"/Users/gai/Downloads/ColorTaiko/src/LargeArcEdge.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LargeArcEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  arrowHeadType,\n  markerEndId\n}) => {\n  // Implement the custom large arc drawing logic here, setting the color based on data.color\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition\n  });\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  // Use the color specified in the data object, or default to black if not specified\n  const edgeStyle = {\n    ...style,\n    stroke: data.color || '#000'\n  };\n  return /*#__PURE__*/_jsxDEV(\"path\", {\n    id: id,\n    style: edgeStyle,\n    className: \"react-flow__edge-path\",\n    d: edgePath,\n    markerEnd: markerEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this);\n};\n_c = LargeArcEdge;\nexport default LargeArcEdge;\nvar _c;\n$RefreshReg$(_c, \"LargeArcEdge\");","map":{"version":3,"names":["LargeArcEdge","id","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","data","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","edgeStyle","stroke","color","_jsxDEV","className","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gai/Downloads/ColorTaiko/src/LargeArcEdge.js"],"sourcesContent":["const LargeArcEdge = ({\n    id,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    style = {},\n    data,\n    arrowHeadType,\n    markerEndId,\n  }) => {\n    // Implement the custom large arc drawing logic here, setting the color based on data.color\n    const edgePath = getBezierPath({ sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition });\n    const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n  \n    // Use the color specified in the data object, or default to black if not specified\n    const edgeStyle = {\n      ...style,\n      stroke: data.color || '#000',\n    };\n  \n    return (\n      <path\n        id={id}\n        style={edgeStyle}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n    );\n  };\n\n  \nexport default LargeArcEdge;"],"mappings":";;AAAA,MAAMA,YAAY,GAAGA,CAAC;EAClBC,EAAE;EACFC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,cAAc;EACdC,cAAc;EACdC,KAAK,GAAG,CAAC,CAAC;EACVC,IAAI;EACJC,aAAa;EACbC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,QAAQ,GAAGC,aAAa,CAAC;IAAEX,OAAO;IAAEC,OAAO;IAAEC,OAAO;IAAEC,OAAO;IAAEC,cAAc;IAAEC;EAAe,CAAC,CAAC;EACtG,MAAMO,SAAS,GAAGC,YAAY,CAACL,aAAa,EAAEC,WAAW,CAAC;;EAE1D;EACA,MAAMK,SAAS,GAAG;IAChB,GAAGR,KAAK;IACRS,MAAM,EAAER,IAAI,CAACS,KAAK,IAAI;EACxB,CAAC;EAED,oBACEC,OAAA;IACElB,EAAE,EAAEA,EAAG;IACPO,KAAK,EAAEQ,SAAU;IACjBI,SAAS,EAAC,uBAAuB;IACjCC,CAAC,EAAET,QAAS;IACZE,SAAS,EAAEA;EAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEN,CAAC;AAACC,EAAA,GAhCE1B,YAAY;AAmClB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/anvitha.manepalli/Desktop/ColorTaiko/src/LargeArcEdge.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { getBezierPath, getMarkerEnd, getEdgeCenter } from 'react-flow-renderer';\nimport { EdgeText } from 'react-flow-renderer';\nimport { useDispatch } from 'react-redux';\nimport { FONT_FAMILY } from '../constant';\nimport { REMOVE_EDGE, REMOVE_ELEMENT } from '../reducer/const';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GetTrashSvg = require('./assets/delete-trash-icon.svg');\nexport const CustomEdge = props => {\n  _s();\n  const {\n    id,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    style = {},\n    data,\n    arrowHeadType,\n    markerEndId\n  } = props;\n\n  // Calculate the edge path using getBezierPath\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition\n  });\n\n  // Calculate control point for arced edge\n  const cx = (sourceX + targetX) / 2; // Midpoint x-coordinate\n  const cy = sourceY - Math.abs(targetY - sourceY) * 0.5; // Control point y-coordinate\n\n  // Define the path for the arced edge\n  const arcedEdgePath = `M${sourceX},${sourceY} Q${cx},${cy} ${targetX},${targetY}`;\n  const isSelected = props.selected;\n  const labelStyle = {\n    fill: isYes ? '#20d76f' : isNo ? '#d2593c' : '#222222',\n    fontFamily: FONT_FAMILY,\n    fontSize: '14px'\n  };\n  const dispatch = useDispatch();\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n  const [centerX, centerY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"animated\",\n      d: path,\n      style: {\n        stroke: style.stroke,\n        strokeWidth: style.strokeWidth,\n        fill: 'none',\n        ...style.additionalEdgeStyles\n      },\n      markerEnd: markerEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), (data === null || data === void 0 ? void 0 : data.label) && /*#__PURE__*/_jsxDEV(EdgeText, {\n      x: data.labelX,\n      y: data.labelY,\n      style: style.labelStyle || {},\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(CustomEdge, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = CustomEdge;\nexport default LargeArcEdge;\nvar _c;\n$RefreshReg$(_c, \"CustomEdge\");","map":{"version":3,"names":["React","getBezierPath","getMarkerEnd","getEdgeCenter","EdgeText","useDispatch","FONT_FAMILY","REMOVE_EDGE","REMOVE_ELEMENT","jsxDEV","_jsxDEV","Fragment","_Fragment","GetTrashSvg","require","CustomEdge","props","_s","id","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","data","arrowHeadType","markerEndId","edgePath","cx","cy","Math","abs","arcedEdgePath","isSelected","selected","labelStyle","fill","isYes","isNo","fontFamily","fontSize","dispatch","markerEnd","centerX","centerY","offsetX","offsetY","children","className","d","path","stroke","strokeWidth","additionalEdgeStyles","fileName","_jsxFileName","lineNumber","columnNumber","label","x","labelX","y","labelY","_c","LargeArcEdge","$RefreshReg$"],"sources":["/Users/anvitha.manepalli/Desktop/ColorTaiko/src/LargeArcEdge.js"],"sourcesContent":["import React from 'react';\nimport { getBezierPath, getMarkerEnd, getEdgeCenter } from 'react-flow-renderer';\nimport { EdgeText } from 'react-flow-renderer';\nimport { useDispatch } from 'react-redux';\nimport { FONT_FAMILY } from '../constant';\nimport { REMOVE_EDGE, REMOVE_ELEMENT } from '../reducer/const';\nconst GetTrashSvg = require('./assets/delete-trash-icon.svg');\n\nexport const CustomEdge = (props: any) => {\n  const {\n    id,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    style = {},\n    data,\n    arrowHeadType,\n    markerEndId,\n  } = props;\n\n  // Calculate the edge path using getBezierPath\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n\n  // Calculate control point for arced edge\n  const cx = (sourceX + targetX) / 2; // Midpoint x-coordinate\n  const cy = sourceY - Math.abs(targetY - sourceY) * 0.5; // Control point y-coordinate\n\n  // Define the path for the arced edge\n  const arcedEdgePath = `M${sourceX},${sourceY} Q${cx},${cy} ${targetX},${targetY}`;\n\n  const isSelected = props.selected;\n\n\n\n  const labelStyle = {\n    fill: isYes ? '#20d76f' : isNo ? '#d2593c' : '#222222',\n    fontFamily: FONT_FAMILY,\n    fontSize: '14px',\n  };\n\n  const dispatch = useDispatch();\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  const [centerX, centerY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n\n  return (\n    <>\n      <path\n        className=\"animated\"\n        d={path}\n        style={{\n          stroke: style.stroke,\n          strokeWidth: style.strokeWidth,\n          fill: 'none',\n          ...style.additionalEdgeStyles,\n        }}\n        markerEnd={markerEnd}\n      />\n      {data?.label && (\n        <EdgeText x={data.labelX} y={data.labelY} style={style.labelStyle || {}}>\n          {data.label}\n        </EdgeText>\n      )}\n    </>\n  );\n};\n\nexport default LargeArcEdge;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
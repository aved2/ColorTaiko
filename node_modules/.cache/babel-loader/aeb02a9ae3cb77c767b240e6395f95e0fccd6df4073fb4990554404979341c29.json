{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaepark/Desktop/research/ColorTaiko/src/LargeArcEdge.js\";\nimport React from 'react';\nimport { getBezierPath, getMarkerEnd } from 'react-flow-renderer';\n\n// useful source: https://reactflow.dev/examples/edges/custom-edges\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LargeArcEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  arrowHeadType,\n  markerEndId\n}) => {\n  // Calculate control point for the curved edge\n  const curveFactor = 4; // Adjust this value for curvature\n  const controlPointX = sourceX + (targetX - sourceX) / curveFactor;\n  const controlPointY = sourceY; // Keep the y-coordinate same for both points\n\n  // Create custom curve path\n  const edgePath = `M${sourceX},${sourceY} C${controlPointX},${controlPointY} ${controlPointX},${controlPointY} ${targetX},${targetY}`;\n\n  // Get marker end\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  // Edge style\n  const edgeStyle = {\n    ...style,\n    fill: 'none' // Ensure no fill\n  };\n  return /*#__PURE__*/_jsxDEV(\"path\", {\n    style: edgeStyle,\n    className: \"react-flow__edge-path\",\n    d: edgePath,\n    markerEnd: markerEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = LargeArcEdge;\nexport default LargeArcEdge;\nvar _c;\n$RefreshReg$(_c, \"LargeArcEdge\");","map":{"version":3,"names":["React","getBezierPath","getMarkerEnd","jsxDEV","_jsxDEV","LargeArcEdge","id","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","arrowHeadType","markerEndId","curveFactor","controlPointX","controlPointY","edgePath","markerEnd","edgeStyle","fill","className","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeongjaepark/Desktop/research/ColorTaiko/src/LargeArcEdge.js"],"sourcesContent":["import React from 'react';\nimport { getBezierPath, getMarkerEnd } from 'react-flow-renderer';\n\n// useful source: https://reactflow.dev/examples/edges/custom-edges\n\nconst LargeArcEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  arrowHeadType,\n  markerEndId,\n}) => {\n  // Calculate control point for the curved edge\n  const curveFactor = 4; // Adjust this value for curvature\n  const controlPointX = sourceX + (targetX - sourceX) / curveFactor;\n  const controlPointY = sourceY; // Keep the y-coordinate same for both points\n\n  // Create custom curve path\n  const edgePath = `M${sourceX},${sourceY} C${controlPointX},${controlPointY} ${controlPointX},${controlPointY} ${targetX},${targetY}`;\n\n  // Get marker end\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  // Edge style\n  const edgeStyle = {\n    ...style,\n    fill: 'none', // Ensure no fill\n  };\n\n  return (\n    <path\n      style={edgeStyle}\n      className=\"react-flow__edge-path\"\n      d={edgePath}\n      markerEnd={markerEnd}\n    />\n  );\n};\n\nexport default LargeArcEdge;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,YAAY,QAAQ,qBAAqB;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,YAAY,GAAGA,CAAC;EACpBC,EAAE;EACFC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,cAAc;EACdC,cAAc;EACdC,KAAK,GAAG,CAAC,CAAC;EACVC,aAAa;EACbC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,WAAW,GAAG,CAAC,CAAC,CAAC;EACvB,MAAMC,aAAa,GAAGV,OAAO,GAAG,CAACE,OAAO,GAAGF,OAAO,IAAIS,WAAW;EACjE,MAAME,aAAa,GAAGV,OAAO,CAAC,CAAC;;EAE/B;EACA,MAAMW,QAAQ,GAAI,IAAGZ,OAAQ,IAAGC,OAAQ,KAAIS,aAAc,IAAGC,aAAc,IAAGD,aAAc,IAAGC,aAAc,IAAGT,OAAQ,IAAGC,OAAQ,EAAC;;EAEpI;EACA,MAAMU,SAAS,GAAGlB,YAAY,CAACY,aAAa,EAAEC,WAAW,CAAC;;EAE1D;EACA,MAAMM,SAAS,GAAG;IAChB,GAAGR,KAAK;IACRS,IAAI,EAAE,MAAM,CAAE;EAChB,CAAC;EAED,oBACElB,OAAA;IACES,KAAK,EAAEQ,SAAU;IACjBE,SAAS,EAAC,uBAAuB;IACjCC,CAAC,EAAEL,QAAS;IACZC,SAAS,EAAEA;EAAU;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEN,CAAC;AAACC,EAAA,GArCIxB,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
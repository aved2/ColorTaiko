{"ast":null,"code":"var _jsxFileName = \"/Users/anvitha.manepalli/Desktop/ColorTaiko/src/LargeArcEdge.js\";\nimport React from 'react';\nimport { EdgeText, getMarkerEnd, getSmoothStepPath } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LargeArcEdge = ({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data\n}) => {\n  // Calculate the midpoint between the source and target nodes\n  const mx = (sourceX + targetX) / 2; // Midpoint x-coordinate\n  const my = (sourceY + targetY) / 2; // Midpoint y-coordinate\n\n  // Calculate the control point coordinates based on the midpoint\n  const cx = mx; // Control point x-coordinate (same as midpoint)\n  const cy = sourceY; // Control point y-coordinate (adjust as needed)\n\n  // Define the path for the curve using the quadratic Bezier curve formula\n  const path = `M${sourceX},${sourceY} Q${cx},${cy} ${targetX},${targetY}`;\n\n  // Get the marker end for the edge\n  const markerEnd = getMarkerEnd(data === null || data === void 0 ? void 0 : data.arrowHeadType, 'edge');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"animated\",\n      d: path,\n      style: {\n        stroke: style.stroke,\n        strokeWidth: style.strokeWidth,\n        fill: 'none',\n        ...style.additionalEdgeStyles\n      },\n      markerEnd: markerEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), (data === null || data === void 0 ? void 0 : data.label) && /*#__PURE__*/_jsxDEV(EdgeText, {\n      x: data.labelX,\n      y: data.labelY,\n      style: style.labelStyle || {},\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_c = LargeArcEdge;\nexport default LargeArcEdge;\nvar _c;\n$RefreshReg$(_c, \"LargeArcEdge\");","map":{"version":3,"names":["React","EdgeText","getMarkerEnd","getSmoothStepPath","jsxDEV","_jsxDEV","Fragment","_Fragment","LargeArcEdge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","data","mx","my","cx","cy","path","markerEnd","arrowHeadType","children","className","d","stroke","strokeWidth","fill","additionalEdgeStyles","fileName","_jsxFileName","lineNumber","columnNumber","label","x","labelX","y","labelY","labelStyle","_c","$RefreshReg$"],"sources":["/Users/anvitha.manepalli/Desktop/ColorTaiko/src/LargeArcEdge.js"],"sourcesContent":["import React from 'react';\nimport { EdgeText, getMarkerEnd, getSmoothStepPath } from 'react-flow-renderer';\n\nconst LargeArcEdge = ({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n}) => {\n  // Calculate the midpoint between the source and target nodes\n  const mx = (sourceX + targetX) / 2; // Midpoint x-coordinate\n  const my = (sourceY + targetY) / 2; // Midpoint y-coordinate\n\n  // Calculate the control point coordinates based on the midpoint\n  const cx = mx; // Control point x-coordinate (same as midpoint)\n  const cy = sourceY; // Control point y-coordinate (adjust as needed)\n\n  // Define the path for the curve using the quadratic Bezier curve formula\n  const path = `M${sourceX},${sourceY} Q${cx},${cy} ${targetX},${targetY}`;\n\n  // Get the marker end for the edge\n  const markerEnd = getMarkerEnd(data?.arrowHeadType, 'edge');\n\n  return (\n    <>\n      <path\n        className=\"animated\"\n        d={path}\n        style={{\n          stroke: style.stroke,\n          strokeWidth: style.strokeWidth,\n          fill: 'none',\n          ...style.additionalEdgeStyles,\n        }}\n        markerEnd={markerEnd}\n      />\n      {data?.label && (\n        <EdgeText x={data.labelX} y={data.labelY} style={style.labelStyle || {}}>\n          {data.label}\n        </EdgeText>\n      )}\n    </>\n  );\n};\n\nexport default LargeArcEdge;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,YAAY,EAAEC,iBAAiB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhF,MAAMC,YAAY,GAAGA,CAAC;EACpBC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,OAAO;EACPC,cAAc;EACdC,cAAc;EACdC,KAAK,GAAG,CAAC,CAAC;EACVC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,EAAE,GAAG,CAACR,OAAO,GAAGE,OAAO,IAAI,CAAC,CAAC,CAAC;EACpC,MAAMO,EAAE,GAAG,CAACR,OAAO,GAAGE,OAAO,IAAI,CAAC,CAAC,CAAC;;EAEpC;EACA,MAAMO,EAAE,GAAGF,EAAE,CAAC,CAAC;EACf,MAAMG,EAAE,GAAGV,OAAO,CAAC,CAAC;;EAEpB;EACA,MAAMW,IAAI,GAAI,IAAGZ,OAAQ,IAAGC,OAAQ,KAAIS,EAAG,IAAGC,EAAG,IAAGT,OAAQ,IAAGC,OAAQ,EAAC;;EAExE;EACA,MAAMU,SAAS,GAAGpB,YAAY,CAACc,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,aAAa,EAAE,MAAM,CAAC;EAE3D,oBACElB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA;MACEoB,SAAS,EAAC,UAAU;MACpBC,CAAC,EAAEL,IAAK;MACRN,KAAK,EAAE;QACLY,MAAM,EAAEZ,KAAK,CAACY,MAAM;QACpBC,WAAW,EAAEb,KAAK,CAACa,WAAW;QAC9BC,IAAI,EAAE,MAAM;QACZ,GAAGd,KAAK,CAACe;MACX,CAAE;MACFR,SAAS,EAAEA;IAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,EACD,CAAAlB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmB,KAAK,kBACV9B,OAAA,CAACJ,QAAQ;MAACmC,CAAC,EAAEpB,IAAI,CAACqB,MAAO;MAACC,CAAC,EAAEtB,IAAI,CAACuB,MAAO;MAACxB,KAAK,EAAEA,KAAK,CAACyB,UAAU,IAAI,CAAC,CAAE;MAAAhB,QAAA,EACrER,IAAI,CAACmB;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACX;EAAA,eACD,CAAC;AAEP,CAAC;AAACO,EAAA,GA5CIjC,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
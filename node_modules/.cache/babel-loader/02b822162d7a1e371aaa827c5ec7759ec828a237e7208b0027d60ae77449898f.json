{"ast":null,"code":"var _jsxFileName = \"/Users/gai/Downloads/ColorTaiko/src/App.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, addEdge, ConnectionMode, ConnectionLineType, MarkerType } from 'reactflow';\nimport CustomNode from './customNode';\nimport ErrorModal from './ErrorModal';\nimport { invertColor, generateRandomColor } from './utils';\nimport 'reactflow/dist/style.css';\nimport './App.css';\nimport { toast } from 'react-toastify';\nimport LargeArcEdge from './LargeArcEdge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineWidths = [1, 2, 3, 4, 5, 6, 8, 10];\nconst initItemStyle = {\n  markerEnd: undefined,\n  markerStart: undefined,\n  animated: false\n};\nconst initWarpStyle = {\n  strokeDasharray: undefined\n};\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst edgeTypes = {\n  largeArc: LargeArcEdge\n};\nconst nodeDefault = {\n  // sourcePosition: Position.Right,\n  // targetPosition: Position.Left,\n  style: {\n    borderRadius: '100%',\n    backgroundColor: 'rgb(227, 213, 194)',\n    width: 27,\n    height: 27,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 3px #604d93'\n  }\n};\nexport default function App() {\n  _s();\n  const previousColorRef = useRef(null);\n  const MIN_VERTICES = 3;\n  const MAX_VERTICES = 50;\n  const idTop = useRef(0);\n  const idBottom = useRef(100);\n  // const [rfInstance, setRfInstance] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n  const [topVertices, setTopVertices] = useState(5);\n  const [bottomVertices, setBottomVertices] = useState(5);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [lineColor, setLineColor] = useState('#666');\n  const [lineWidth, setLineWidth] = useState(4);\n  const [lineStyle, setLineStyle] = useState('default');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const currNodeA = useRef(null);\n  const currNodeB = useRef(null);\n  const round = useRef(0);\n  const isTop = useRef(false);\n  const lineStyles = useCallback(() => {\n    return [{\n      key: 'default',\n      name: 'Default',\n      lineComponent: undefined,\n      itemStyle: initItemStyle,\n      // add to edges\n      wrapStyle: initWarpStyle // add to linestyles\n    },\n    //  {\n    //    key: 'dashed',\n    //    name: 'Dasthed',\n    //    lineComponent: undefined,\n    //    itemStyle: {},\n    //    wrapStyle: {\n    //      strokeDasharray: '5, 5'\n    //    }\n    //  },\n    //  {\n    //    key: 'dotDash',\n    //    name: 'DotDash',\n    //    lineComponent: undefined,\n    //    itemStyle: {},\n    //    wrapStyle: {\n    //      strokeDasharray: '1, 5'\n    //    }\n    //  },\n    //  {\n    //    key: 'shortDash',\n    //    name: 'ShortDash',\n    //    lineComponent: undefined,\n    //    itemStyle: {},\n    //    wrapStyle: {\n    //      strokeDasharray: '5, 5, 1, 5'\n    //    }\n    //  },\n    //  {\n    //    key: 'moveDash',\n    //    name: 'MoveDash',\n    //    lineComponent: undefined,\n    //    itemStyle: {\n    //      animated: true\n    //    },\n    //    wrapStyle: {}\n    //  },\n    //  {\n    //    key: 'endArrow',\n    //    name: 'EndArrow',\n    //    lineComponent: undefined,\n    //    itemStyle: {\n    //      markerEnd: {\n    //        type: MarkerType.Arrow,\n    //        // color: lineColor,\n    //      },\n    //      animated: false\n    //    },\n    //    wrapStyle: {}\n    //  },\n    {\n      key: 'endArrowClosed',\n      name: 'EndArrowClosed',\n      lineComponent: undefined,\n      itemStyle: {\n        markerEnd: {\n          type: MarkerType.ArrowClosed\n          // color: lineColor,\n        },\n        animated: false\n      },\n      wrapStyle: {}\n    }\n    //  {\n    //    key: 'bothArrow',\n    //    name: 'BothArrow',\n    //    lineComponent: undefined,\n    //    itemStyle: {\n    //      markerEnd: {\n    //        type: MarkerType.Arrow,\n    //        // color: lineColor,\n    //      },\n    //      markerStart: {\n    //        type: MarkerType.Arrow,\n    //        // color: lineColor,\n    //      },\n    //      animated: false\n    //    },\n    //    wrapStyle: {}\n    //  },\n    //  {\n    //    key: 'bothArrowClosed',\n    //    name: 'BothArrowClosed',\n    //    lineComponent: undefined,\n    //    itemStyle: {\n    //      markerEnd: {\n    //        type: MarkerType.ArrowClosed,\n    //        // color: lineColor,\n    //      },\n    //      markerStart: {\n    //        type: MarkerType.ArrowClosed,\n    //        // color: lineColor,\n    //      },\n    //      animated: false\n    //    },\n    //    wrapStyle: {}\n    //  },\n    // {\n    //   key: 'bothArrowClosed',\n    //   name: 'BothArrowClosed',\n    //   lineComponent: undefined,\n    //   itemStyle: {},\n    //   wrapStyle: {}\n    // },\n    ];\n  }, []);\n  useEffect(() => {\n    setNodes(() => []);\n    idTop.current = 0;\n    idBottom.current = 100;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    // top\n    const topArr = new Array(topVertices).fill(idTop.current + 1);\n    const topItemWidth = (width - 30) / (topVertices - 1);\n    topArr.forEach((_, index) => {\n      addItems({\n        x: index * topItemWidth,\n        y: 0\n      });\n    });\n    // bottom\n    const bottomItemWidth = (width - 30) / (bottomVertices - 1);\n    new Array(bottomVertices).fill(idBottom.current + 1).forEach((_, index) => {\n      addItems({\n        x: index * bottomItemWidth,\n        y: height * 3 / 5\n      });\n    });\n  }, [topVertices, bottomVertices]);\n  useEffect(() => {\n    const style = lineStyles().find(item => item.key === lineStyle);\n    const nds = edges.map(item => {\n      var _item$style, _item$style2, _item$style3;\n      return {\n        ...item,\n        style: {\n          stroke: item === null || item === void 0 ? void 0 : (_item$style = item.style) === null || _item$style === void 0 ? void 0 : _item$style.stroke,\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...{\n          ...style.itemStyle,\n          markerEnd: style.itemStyle.markerEnd ? {\n            ...style.itemStyle.markerEnd,\n            color: item === null || item === void 0 ? void 0 : (_item$style2 = item.style) === null || _item$style2 === void 0 ? void 0 : _item$style2.stroke\n          } : undefined,\n          markerStart: style.itemStyle.markerStart ? {\n            ...style.itemStyle.markerStart,\n            color: item === null || item === void 0 ? void 0 : (_item$style3 = item.style) === null || _item$style3 === void 0 ? void 0 : _item$style3.stroke\n          } : undefined\n        }\n      };\n    });\n    // directly setEdges([...nds])ï¼Œdo not re-render lines with arrows\n    if (lineStyle.includes('Arrow')) {\n      setEdges([]);\n      setTimeout(() => {\n        setEdges([...nds]);\n      });\n    } else {\n      setEdges([...nds]);\n    }\n  }, [lineWidth, lineStyle]);\n  const addItems = pos => {\n    let idNode;\n    if (pos.y > 80) {\n      idBottom.current = idBottom.current + 1;\n      idNode = idBottom.current;\n    } else {\n      idTop.current = idTop.current + 1;\n      idNode = idTop.current;\n    }\n    const newNode = {\n      id: idNode.toString(),\n      position: pos,\n      data: {\n        label: ''\n      },\n      type: 'custom',\n      ...nodeDefault\n    };\n    setNodes(nds => nds.concat(newNode));\n  };\n  const availableColors = []; // Array to hold available colors\n\n  const onConnect = useCallback(params => {\n    let randomColorPair;\n\n    // Generate a random color pair if there is no previous pair\n    if (!previousColorRef.current) {\n      randomColorPair = [generateRandomColor(), generateRandomColor()];\n    }\n    let shNode = {};\n    let thNode = {};\n    nodes.forEach(item => {\n      if (item.id === params.source) {\n        shNode = item;\n      }\n      if (item.id === params.target) {\n        thNode = item;\n      }\n    });\n    const style = lineStyles().find(item => item.key === lineStyle);\n    const {\n      source,\n      sourceHandle,\n      target,\n      targetHandle,\n      ...P\n    } = params;\n    let sh = sourceHandle;\n    let th = targetHandle;\n    // Check if an edge already exists between the source and target nodes\n    const isEdgeExists = edges.some(edge => edge.source === source && edge.target === target || edge.source === target && edge.target === source);\n    if (isEdgeExists) {\n      setErrorMessage('An edge already exists between these nodes. Draw another edge.');\n      return; // Prevent adding a new edge\n    }\n    if (shNode.position.y === thNode.position.y) {\n      toast.warning(\"You can't draw horizontal lines\", {\n        position: \"top-center\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    } else {\n      if (shNode.position.y < thNode.position.y) {\n        sh = 'c';\n        th = 'a';\n      } else {\n        sh = 'a';\n        th = 'c';\n      }\n    }\n    let colorPairToUse;\n\n    // Use the previous color pair if available, otherwise use the new random color pair\n    if (!previousColorRef.current) {\n      colorPairToUse = randomColorPair;\n      previousColorRef.current = randomColorPair;\n    } else {\n      colorPairToUse = previousColorRef.current;\n      if (!isEdgeExists) {\n        previousColorRef.current = null; // Reset to null after using the previous color pair\n      }\n    }\n    round.current += 1;\n    // console.log(count);\n    console.log(round.current);\n    console.log(colorPairToUse);\n    let newCurvedEdgeA;\n    let newCurvedEdgeB;\n    // see if any demand to generate horizontal lines\n    let prevNodeA;\n    let prevNodeB;\n    if (!currNodeA.current && !currNodeB.current) {\n      currNodeA.current = String(Math.max(Number(source), Number(target)));\n      currNodeB.current = String(Math.min(Number(source), Number(target)));\n    } else {\n      prevNodeA = currNodeA.current;\n      prevNodeB = currNodeB.current;\n      currNodeA.current = String(Math.max(Number(source), Number(target)));\n      currNodeB.current = String(Math.min(Number(source), Number(target)));\n    }\n    if (round.current % 2 === 0) {\n      var _style$itemStyle, _style$itemStyle2, _style$itemStyle3, _style$itemStyle4, _style$itemStyle5, _style$itemStyle6, _style$itemStyle7, _style$itemStyle8;\n      // even round, check if demand to draw horizontal lines\n      if (currNodeA.current > 100 && prevNodeA > 100) {\n        isTop.current = false;\n      }\n      newCurvedEdgeA = {\n        ...P,\n        source: currNodeA.current,\n        target: prevNodeA,\n        type: 'largeArc',\n        data: {\n          isTopLine: isTop.current\n        },\n        // animated: true,\n        style: {\n          stroke: colorPairToUse[0],\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...style.itemStyle,\n        markerEnd: style !== null && style !== void 0 && (_style$itemStyle = style.itemStyle) !== null && _style$itemStyle !== void 0 && _style$itemStyle.markerEnd ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle2 = style.itemStyle) === null || _style$itemStyle2 === void 0 ? void 0 : _style$itemStyle2.markerEnd),\n          color: colorPairToUse[0]\n        } : undefined,\n        markerStart: style !== null && style !== void 0 && (_style$itemStyle3 = style.itemStyle) !== null && _style$itemStyle3 !== void 0 && _style$itemStyle3.markerStart ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle4 = style.itemStyle) === null || _style$itemStyle4 === void 0 ? void 0 : _style$itemStyle4.markerStart),\n          color: colorPairToUse[0]\n        } : undefined\n      };\n      newCurvedEdgeB = {\n        ...P,\n        source: currNodeB.current,\n        target: prevNodeB,\n        type: 'largeArc',\n        // animated: true,\n        data: {\n          isTopLine: !isTop.current\n        },\n        style: {\n          stroke: colorPairToUse[0],\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...style.itemStyle,\n        markerEnd: style !== null && style !== void 0 && (_style$itemStyle5 = style.itemStyle) !== null && _style$itemStyle5 !== void 0 && _style$itemStyle5.markerEnd ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle6 = style.itemStyle) === null || _style$itemStyle6 === void 0 ? void 0 : _style$itemStyle6.markerEnd),\n          color: colorPairToUse[0]\n        } : undefined,\n        markerStart: style !== null && style !== void 0 && (_style$itemStyle7 = style.itemStyle) !== null && _style$itemStyle7 !== void 0 && _style$itemStyle7.markerStart ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle8 = style.itemStyle) === null || _style$itemStyle8 === void 0 ? void 0 : _style$itemStyle8.markerStart),\n          color: colorPairToUse[0]\n        } : undefined\n      };\n      if (currNodeB.current === prevNodeB) {\n        newCurvedEdgeB = null;\n      }\n      if (currNodeA.current === prevNodeA) {\n        newCurvedEdgeA = null;\n      }\n    } else {\n      newCurvedEdgeA = null;\n      newCurvedEdgeB = null;\n    }\n    return setEdges(eds =>\n    // addEdge(\n    //   {\n    //     ...P,\n    //     source,\n    //     target,\n    //     sourceHandle: sh,\n    //     targetHandle: th,\n    //     type: ConnectionLineType.Straight,\n    //     style: {\n    //       stroke: colorPairToUse[0], // Use the first color in the pair for the current edge\n    //       strokeWidth: lineWidth,\n    //       ...initWarpStyle,\n    //       ...style.wrapStyle,\n    //     },\n    //     ...initItemStyle,\n    //     ...style.itemStyle,\n    //     markerEnd: style?.itemStyle?.markerEnd\n    //       ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[1] } // Use the second color in the pair for markers\n    //       : undefined,\n    //     markerStart: style?.itemStyle?.markerStart\n    //       ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[1] } // Use the second color in the pair for markers\n    //       : undefined,\n    //   },\n    //   eds\n    // )\n    {\n      var _style$itemStyle9, _style$itemStyle10, _style$itemStyle11, _style$itemStyle12;\n      const newEdge = {\n        ...P,\n        source,\n        target,\n        sourceHandle: sh,\n        targetHandle: th,\n        type: ConnectionLineType.Straight,\n        style: {\n          stroke: colorPairToUse[0],\n          // Use the first color in the pair for the current edge\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...style.itemStyle,\n        markerEnd: style !== null && style !== void 0 && (_style$itemStyle9 = style.itemStyle) !== null && _style$itemStyle9 !== void 0 && _style$itemStyle9.markerEnd ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle10 = style.itemStyle) === null || _style$itemStyle10 === void 0 ? void 0 : _style$itemStyle10.markerEnd),\n          color: colorPairToUse[1]\n        } : undefined,\n        markerStart: style !== null && style !== void 0 && (_style$itemStyle11 = style.itemStyle) !== null && _style$itemStyle11 !== void 0 && _style$itemStyle11.markerStart ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle12 = style.itemStyle) === null || _style$itemStyle12 === void 0 ? void 0 : _style$itemStyle12.markerStart),\n          color: colorPairToUse[1]\n        } : undefined\n      };\n      return [...eds, newEdge, ...(newCurvedEdgeA ? [newCurvedEdgeA, newCurvedEdgeB] : [])];\n    });\n  }, [setEdges, lineWidth, lineStyle, nodes, lineStyles, edges]);\n  const closeModal = () => {\n    setErrorMessage(null);\n  };\n  const undoLastLine = () => {\n    setEdges(edges.slice(0, -1));\n  };\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    const egs = edges.map(e => {\n      return {\n        ...e,\n        style: {\n          ...e.style,\n          stroke: invertColor(e.style.stroke)\n        },\n        markerEnd: e.markerEnd ? {\n          ...e.markerEnd,\n          color: invertColor(e.markerEnd.color)\n        } : undefined,\n        markerStart: e.markerStart ? {\n          ...e.markerStart,\n          color: invertColor(e.markerStart.color)\n        } : undefined\n      };\n    });\n    setEdges([...egs]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${darkMode ? 'dark-mode' : ''}`,\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"undoButton\",\n            onClick: undoLastLine,\n            children: \"Undo Last Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"modeSwitch\",\n            onClick: toggleDarkMode,\n            children: darkMode ? 'Light Mode' : 'Dark Mode'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"ColorTaiko!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"top-vertices\",\n              children: \"Top Vertices:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"top-vertices\",\n              value: topVertices,\n              min: MIN_VERTICES,\n              max: MAX_VERTICES,\n              maxLength: 2,\n              onChange: e => {\n                const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n                setTopVertices(newValue);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setTopVertices(Math.min(topVertices + 1, MAX_VERTICES)),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setTopVertices(Math.max(topVertices - 1, MIN_VERTICES)),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 14\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"bottom-vertices\",\n              children: \"Bottom Vertices:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"bottom-vertices\",\n              type: \"number\",\n              value: bottomVertices,\n              min: MIN_VERTICES,\n              max: MAX_VERTICES,\n              maxLength: 2,\n              onChange: e => {\n                const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n                setBottomVertices(newValue);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setBottomVertices(Math.min(bottomVertices + 1, MAX_VERTICES)),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setBottomVertices(Math.max(bottomVertices - 1, MIN_VERTICES)),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 14\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"top-vertices\",\n              children: \"Line width:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              defaultValue: lineWidth,\n              onChange: e => {\n                setLineWidth(e.target.value);\n              },\n              children: lineWidths.map(width => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: width,\n                  children: width\n                }, width + 'width', false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 594,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 14\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svg-content\",\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        edgeTypes: edgeTypes,\n        connectionLineType: ConnectionLineType.Straight\n        // onInit={setRfInstance}\n        ,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onConnectStart: () => {\n          const initColor = generateRandomColor();\n          setLineColor(initColor);\n        },\n        autoPanOnConnect: false // cannot move after connecting\n        ,\n        panOnDrag: false,\n        nodesDraggable: false,\n        nodesFocusable: false,\n        zoomOnScroll: false,\n        zoomOnPinch: false,\n        zoomOnDoubleClick: false,\n        connectionMode: ConnectionMode.Loose,\n        nodeTypes: nodeTypes,\n        onEdgeClick: (e, node) => {\n          // change the lines you selected here\n          console.log(e, node);\n        },\n        connectionLineStyle: {\n          stroke: lineColor,\n          strokeWidth: lineWidth,\n          ...lineStyles().find(style => style.key === lineStyle).wrapStyle\n          // strokeDasharray: '5, 5'\n        }\n        // viewportInitialized={false}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 8\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorModal, {\n        message: errorMessage,\n        onClose: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 528,\n    columnNumber: 4\n  }, this);\n}\n_s(App, \"5v4bwC32vjGtYQHRJqqJJl/kL+I=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useState","useRef","useEffect","ReactFlow","useNodesState","useEdgesState","addEdge","ConnectionMode","ConnectionLineType","MarkerType","CustomNode","ErrorModal","invertColor","generateRandomColor","toast","LargeArcEdge","jsxDEV","_jsxDEV","lineWidths","initItemStyle","markerEnd","undefined","markerStart","animated","initWarpStyle","strokeDasharray","nodeTypes","custom","edgeTypes","largeArc","nodeDefault","style","borderRadius","backgroundColor","width","height","display","alignItems","justifyContent","border","App","_s","previousColorRef","MIN_VERTICES","MAX_VERTICES","idTop","idBottom","darkMode","setDarkMode","topVertices","setTopVertices","bottomVertices","setBottomVertices","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","lineColor","setLineColor","lineWidth","setLineWidth","lineStyle","setLineStyle","errorMessage","setErrorMessage","currNodeA","currNodeB","round","isTop","lineStyles","key","name","lineComponent","itemStyle","wrapStyle","type","ArrowClosed","current","window","innerWidth","innerHeight","topArr","Array","fill","topItemWidth","forEach","_","index","addItems","x","y","bottomItemWidth","find","item","nds","map","_item$style","_item$style2","_item$style3","stroke","strokeWidth","color","includes","setTimeout","pos","idNode","newNode","id","toString","position","data","label","concat","availableColors","onConnect","params","randomColorPair","shNode","thNode","source","target","sourceHandle","targetHandle","P","sh","th","isEdgeExists","some","edge","warning","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","colorPairToUse","console","log","newCurvedEdgeA","newCurvedEdgeB","prevNodeA","prevNodeB","String","Math","max","Number","min","_style$itemStyle","_style$itemStyle2","_style$itemStyle3","_style$itemStyle4","_style$itemStyle5","_style$itemStyle6","_style$itemStyle7","_style$itemStyle8","isTopLine","eds","_style$itemStyle9","_style$itemStyle10","_style$itemStyle11","_style$itemStyle12","newEdge","Straight","closeModal","undoLastLine","slice","toggleDarkMode","egs","e","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","maxLength","onChange","newValue","parseInt","defaultValue","connectionLineType","onConnectStart","initColor","autoPanOnConnect","panOnDrag","nodesDraggable","nodesFocusable","zoomOnScroll","zoomOnPinch","zoomOnDoubleClick","connectionMode","Loose","onEdgeClick","node","connectionLineStyle","message","onClose","_c","$RefreshReg$"],"sources":["/Users/gai/Downloads/ColorTaiko/src/App.js"],"sourcesContent":["import { useCallback, useState, useRef, useEffect } from 'react';\r\nimport ReactFlow, { useNodesState, useEdgesState, addEdge, ConnectionMode, ConnectionLineType, MarkerType } from 'reactflow';\r\nimport CustomNode from './customNode';\r\nimport ErrorModal from './ErrorModal'; \r\nimport { invertColor, generateRandomColor } from './utils';\r\nimport 'reactflow/dist/style.css';\r\nimport './App.css';\r\nimport { toast } from 'react-toastify';\r\nimport  LargeArcEdge from './LargeArcEdge';\r\n\r\nconst lineWidths = [1, 2, 3, 4, 5, 6,8,10];\r\n\r\n\r\nconst initItemStyle = {\r\n markerEnd: undefined,\r\n markerStart: undefined,\r\n animated: false\r\n}\r\n\r\n\r\nconst initWarpStyle = {\r\n strokeDasharray: undefined\r\n}\r\n\r\n\r\nconst nodeTypes = {\r\n custom: CustomNode,\r\n};\r\n\r\nconst edgeTypes = {\r\n  largeArc: LargeArcEdge,\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst nodeDefault = {\r\n // sourcePosition: Position.Right,\r\n // targetPosition: Position.Left,\r\n style: {\r\n   borderRadius: '100%',\r\n   backgroundColor: 'rgb(227, 213, 194)',\r\n   width: 27,\r\n   height: 27,\r\n   display: 'flex',\r\n   alignItems: 'center',\r\n   justifyContent: 'center',\r\n   border: 'solid 3px #604d93',\r\n },\r\n}\r\nexport default function App() {\r\n const previousColorRef = useRef(null);\r\n const MIN_VERTICES = 3;\r\n const MAX_VERTICES = 50;\r\n const idTop = useRef(0)\r\n const idBottom = useRef(100)\r\n // const [rfInstance, setRfInstance] = useState(null);\r\n const [darkMode, setDarkMode] = useState(false);\r\n const [topVertices, setTopVertices] = useState(5);\r\n const [bottomVertices, setBottomVertices] = useState(5);\r\n const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n const [lineColor, setLineColor] = useState('#666');\r\n const [lineWidth, setLineWidth] = useState(4);\r\n const [lineStyle, setLineStyle] = useState('default');\r\n const [errorMessage, setErrorMessage] = useState(null);\r\n const currNodeA = useRef(null);\r\n const currNodeB = useRef(null);\r\n const round = useRef(0);\r\n const isTop = useRef(false);\r\n\r\n\r\n\r\n\r\n\r\n const lineStyles = useCallback(() => {\r\n   return [\r\n     {\r\n       key: 'default',\r\n       name: 'Default',\r\n       lineComponent: undefined,\r\n       itemStyle: initItemStyle, // add to edges\r\n       wrapStyle: initWarpStyle // add to linestyles\r\n     },\r\n    //  {\r\n    //    key: 'dashed',\r\n    //    name: 'Dasthed',\r\n    //    lineComponent: undefined,\r\n    //    itemStyle: {},\r\n    //    wrapStyle: {\r\n    //      strokeDasharray: '5, 5'\r\n    //    }\r\n    //  },\r\n    //  {\r\n    //    key: 'dotDash',\r\n    //    name: 'DotDash',\r\n    //    lineComponent: undefined,\r\n    //    itemStyle: {},\r\n    //    wrapStyle: {\r\n    //      strokeDasharray: '1, 5'\r\n    //    }\r\n    //  },\r\n    //  {\r\n    //    key: 'shortDash',\r\n    //    name: 'ShortDash',\r\n    //    lineComponent: undefined,\r\n    //    itemStyle: {},\r\n    //    wrapStyle: {\r\n    //      strokeDasharray: '5, 5, 1, 5'\r\n    //    }\r\n    //  },\r\n    //  {\r\n    //    key: 'moveDash',\r\n    //    name: 'MoveDash',\r\n    //    lineComponent: undefined,\r\n    //    itemStyle: {\r\n    //      animated: true\r\n    //    },\r\n    //    wrapStyle: {}\r\n    //  },\r\n    //  {\r\n    //    key: 'endArrow',\r\n    //    name: 'EndArrow',\r\n    //    lineComponent: undefined,\r\n    //    itemStyle: {\r\n    //      markerEnd: {\r\n    //        type: MarkerType.Arrow,\r\n    //        // color: lineColor,\r\n    //      },\r\n    //      animated: false\r\n    //    },\r\n    //    wrapStyle: {}\r\n    //  },\r\n     {\r\n       key: 'endArrowClosed',\r\n       name: 'EndArrowClosed',\r\n       lineComponent: undefined,\r\n       itemStyle: {\r\n         markerEnd: {\r\n           type: MarkerType.ArrowClosed,\r\n           // color: lineColor,\r\n         },\r\n         animated: false\r\n       },\r\n       wrapStyle: {}\r\n     }\r\n    //  {\r\n    //    key: 'bothArrow',\r\n    //    name: 'BothArrow',\r\n    //    lineComponent: undefined,\r\n    //    itemStyle: {\r\n    //      markerEnd: {\r\n    //        type: MarkerType.Arrow,\r\n    //        // color: lineColor,\r\n    //      },\r\n    //      markerStart: {\r\n    //        type: MarkerType.Arrow,\r\n    //        // color: lineColor,\r\n    //      },\r\n    //      animated: false\r\n    //    },\r\n    //    wrapStyle: {}\r\n    //  },\r\n    //  {\r\n    //    key: 'bothArrowClosed',\r\n    //    name: 'BothArrowClosed',\r\n    //    lineComponent: undefined,\r\n    //    itemStyle: {\r\n    //      markerEnd: {\r\n    //        type: MarkerType.ArrowClosed,\r\n    //        // color: lineColor,\r\n    //      },\r\n    //      markerStart: {\r\n    //        type: MarkerType.ArrowClosed,\r\n    //        // color: lineColor,\r\n    //      },\r\n    //      animated: false\r\n    //    },\r\n    //    wrapStyle: {}\r\n    //  },\r\n     // {\r\n     //   key: 'bothArrowClosed',\r\n     //   name: 'BothArrowClosed',\r\n     //   lineComponent: undefined,\r\n     //   itemStyle: {},\r\n     //   wrapStyle: {}\r\n     // },\r\n   ]\r\n }, [])\r\n\r\n\r\n useEffect(() => {\r\n   setNodes(() => []);\r\n   idTop.current = 0;\r\n   idBottom.current = 100;\r\n   const width = window.innerWidth\r\n   const height = window.innerHeight\r\n   // top\r\n   const topArr = new Array(topVertices).fill(idTop.current + 1)\r\n   const topItemWidth = (width - 30) / (topVertices - 1)\r\n   topArr.forEach((_, index) => {\r\n     addItems({x: index * topItemWidth, y: 0})\r\n   })\r\n   // bottom\r\n   const bottomItemWidth = (width - 30) / (bottomVertices - 1)\r\n   new Array(bottomVertices).fill(idBottom.current + 1).forEach((_, index) => {\r\n     addItems({x: index * bottomItemWidth, y: height * 3 / 5})\r\n   })\r\n }, [topVertices, bottomVertices])\r\n\r\n\r\n useEffect(() => {\r\n     const style = lineStyles().find((item) => item.key === lineStyle)\r\n     const nds = edges.map((item) => {\r\n     return {\r\n       ...item,\r\n       style: {\r\n         stroke: item?.style?.stroke,\r\n         strokeWidth: lineWidth,\r\n         ...initWarpStyle,\r\n         ...style.wrapStyle,\r\n       },\r\n       ...initItemStyle,\r\n       ...{\r\n         ...style.itemStyle,\r\n         markerEnd: style.itemStyle.markerEnd ? {...style.itemStyle.markerEnd, color: item?.style?.stroke,} : undefined,\r\n         markerStart: style.itemStyle.markerStart ? {...style.itemStyle.markerStart, color: item?.style?.stroke} : undefined,\r\n       },\r\n     }\r\n   })\r\n   // directly setEdges([...nds])ï¼Œdo not re-render lines with arrows\r\n   if (lineStyle.includes('Arrow')) {\r\n     setEdges([])\r\n     setTimeout(() => {\r\n       setEdges([...nds])\r\n     });\r\n   } else {\r\n     setEdges([...nds])\r\n   }\r\n }, [lineWidth, lineStyle])\r\n\r\n\r\n const addItems = (pos) => {\r\n   let idNode;\r\n   if (pos.y > 80) {\r\n     idBottom.current = idBottom.current + 1;\r\n     idNode = idBottom.current\r\n   } else {\r\n     idTop.current = idTop.current + 1;\r\n     idNode = idTop.current\r\n   }\r\n   const newNode = {\r\n     id: idNode.toString(),\r\n     position: pos,\r\n     data: { label: '' },\r\n     type: 'custom',\r\n     ...nodeDefault\r\n   };\r\n   setNodes((nds) => nds.concat(newNode));\r\n }\r\n\r\n\r\n const availableColors = []; // Array to hold available colors\r\n\r\n const onConnect = useCallback(\r\n  (params) => {\r\n    let randomColorPair;\r\n\r\n    // Generate a random color pair if there is no previous pair\r\n    if (!previousColorRef.current) {\r\n      randomColorPair = [generateRandomColor(), generateRandomColor()];\r\n    }\r\n\r\n    let shNode = {};\r\n    let thNode = {};\r\n\r\n    nodes.forEach((item) => {\r\n      if (item.id === params.source) {\r\n        shNode = item;\r\n      }\r\n      if (item.id === params.target) {\r\n        thNode = item;\r\n      }\r\n    });\r\n    \r\n    const style = lineStyles().find((item) => item.key === lineStyle);\r\n    const { source, sourceHandle, target, targetHandle, ...P } = params;\r\n    let sh = sourceHandle;\r\n    let th = targetHandle;\r\n    // Check if an edge already exists between the source and target nodes\r\n    const isEdgeExists = edges.some(edge => (  (edge.source === source && edge.target === target) ||  (edge.source === target && edge.target === source)  ));\r\n\r\n    if (isEdgeExists) {\r\n      setErrorMessage('An edge already exists between these nodes. Draw another edge.');\r\n      return; // Prevent adding a new edge\r\n    }\r\n\r\n    if (shNode.position.y === thNode.position.y) {\r\n      toast.warning(\"You can't draw horizontal lines\", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return\r\n    } else {\r\n      if (shNode.position.y < thNode.position.y) {\r\n        sh = 'c';\r\n        th = 'a';\r\n      } else {\r\n        sh = 'a';\r\n        th = 'c';\r\n      }\r\n      \r\n    }\r\n    \r\n    let colorPairToUse;\r\n\r\n\r\n    // Use the previous color pair if available, otherwise use the new random color pair\r\n    if (!previousColorRef.current ) {\r\n      colorPairToUse = randomColorPair;\r\n      previousColorRef.current = randomColorPair;\r\n\r\n    } else {\r\n      colorPairToUse = previousColorRef.current;\r\n      if (!isEdgeExists) {\r\n        previousColorRef.current = null; // Reset to null after using the previous color pair\r\n      }\r\n    }\r\n    \r\n    round.current +=1;\r\n    // console.log(count);\r\n    console.log(round.current);\r\n    console.log(colorPairToUse);\r\n    let newCurvedEdgeA;\r\n    let newCurvedEdgeB;\r\n    // see if any demand to generate horizontal lines\r\n    let prevNodeA;\r\n    let prevNodeB;\r\n    \r\n\r\n    \r\n    if (!currNodeA.current && !currNodeB.current) {\r\n      currNodeA.current =  String(Math.max(Number(source), Number(target)));\r\n      currNodeB.current =  String(Math.min(Number(source), Number(target)));\r\n    } else {\r\n      prevNodeA = currNodeA.current;\r\n      prevNodeB = currNodeB.current;\r\n      currNodeA.current =  String(Math.max(Number(source), Number(target)));\r\n      currNodeB.current =  String(Math.min(Number(source), Number(target)));\r\n    }\r\n    \r\n    if (round.current % 2 === 0) {    // even round, check if demand to draw horizontal lines\r\n      if (currNodeA.current > 100 && prevNodeA > 100) {\r\n        isTop.current = false;\r\n      }\r\n      newCurvedEdgeA = {\r\n        ...P,\r\n        source: currNodeA.current,\r\n        target: prevNodeA,\r\n        type: 'largeArc', \r\n        data: { isTopLine: isTop.current },\r\n        // animated: true,\r\n        style: {\r\n          stroke: colorPairToUse[0], \r\n          strokeWidth: lineWidth,\r\n          ...initWarpStyle,\r\n          ...style.wrapStyle, \r\n        },\r\n        \r\n          ...initItemStyle,\r\n          ...style.itemStyle,\r\n          markerEnd: style?.itemStyle?.markerEnd\r\n            ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[0] }\r\n            : undefined,\r\n          markerStart: style?.itemStyle?.markerStart\r\n            ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[0] }\r\n            : undefined,\r\n      };  \r\n\r\n      \r\n\r\n      newCurvedEdgeB = {\r\n        ...P,\r\n        source: currNodeB.current,\r\n        target: prevNodeB,\r\n        type: 'largeArc',\r\n        // animated: true,\r\n        data: { isTopLine: !isTop.current },\r\n        style: {\r\n          stroke: colorPairToUse[0], \r\n          strokeWidth: lineWidth,\r\n          ...initWarpStyle,\r\n          ...style.wrapStyle, \r\n        },\r\n        \r\n          ...initItemStyle,\r\n          ...style.itemStyle,\r\n          markerEnd: style?.itemStyle?.markerEnd\r\n            ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[0] }\r\n            : undefined,\r\n          markerStart: style?.itemStyle?.markerStart\r\n            ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[0] }\r\n            : undefined,\r\n      };  \r\n\r\n      if (currNodeB.current === prevNodeB) {\r\n        newCurvedEdgeB = null;\r\n      }\r\n      if (currNodeA.current === prevNodeA) {\r\n        newCurvedEdgeA = null;\r\n      }\r\n    } else  {\r\n      newCurvedEdgeA = null;\r\n      newCurvedEdgeB = null;\r\n    }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n    \r\n\r\n    return setEdges((eds) =>\r\n      // addEdge(\r\n      //   {\r\n      //     ...P,\r\n      //     source,\r\n      //     target,\r\n      //     sourceHandle: sh,\r\n      //     targetHandle: th,\r\n      //     type: ConnectionLineType.Straight,\r\n      //     style: {\r\n      //       stroke: colorPairToUse[0], // Use the first color in the pair for the current edge\r\n      //       strokeWidth: lineWidth,\r\n      //       ...initWarpStyle,\r\n      //       ...style.wrapStyle,\r\n      //     },\r\n      //     ...initItemStyle,\r\n      //     ...style.itemStyle,\r\n      //     markerEnd: style?.itemStyle?.markerEnd\r\n      //       ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[1] } // Use the second color in the pair for markers\r\n      //       : undefined,\r\n      //     markerStart: style?.itemStyle?.markerStart\r\n      //       ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[1] } // Use the second color in the pair for markers\r\n      //       : undefined,\r\n      //   },\r\n      //   eds\r\n      // )\r\n      {\r\n\r\n\r\n        const newEdge = {\r\n          ...P,\r\n          source,\r\n          target,\r\n          sourceHandle: sh,\r\n          targetHandle: th,\r\n          type: ConnectionLineType.Straight,\r\n          style: {\r\n            stroke: colorPairToUse[0], // Use the first color in the pair for the current edge\r\n            strokeWidth: lineWidth,\r\n            ...initWarpStyle,\r\n            ...style.wrapStyle,\r\n          },\r\n          ...initItemStyle,\r\n          ...style.itemStyle,\r\n          markerEnd: style?.itemStyle?.markerEnd\r\n            ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[1] }\r\n            : undefined,\r\n          markerStart: style?.itemStyle?.markerStart\r\n            ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[1] }\r\n            : undefined,\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n    \r\n      \r\n        return [...eds, newEdge, ...(newCurvedEdgeA ? [newCurvedEdgeA, newCurvedEdgeB] : []),  ];\r\n\r\n      });\r\n  },\r\n  [setEdges, lineWidth, lineStyle, nodes, lineStyles, edges]\r\n);\r\n\r\n\r\nconst closeModal = () => {\r\n  setErrorMessage(null);\r\n};\r\n\r\n\r\n const undoLastLine = () => {\r\n   setEdges(edges.slice(0, -1));\r\n };\r\n\r\n\r\n const toggleDarkMode = () => {\r\n   setDarkMode(!darkMode);\r\n   const egs = edges.map(e => {\r\n     return {\r\n       ...e,\r\n       style: {...e.style, stroke: invertColor(e.style.stroke)},\r\n       markerEnd: e.markerEnd ? {\r\n         ...e.markerEnd,\r\n         color: invertColor(e.markerEnd.color),\r\n       } : undefined,\r\n       markerStart: e.markerStart ? {\r\n         ...e.markerStart,\r\n         color: invertColor(e.markerStart.color),\r\n       } : undefined,\r\n     }\r\n   })\r\n   setEdges([...egs])\r\n };\r\n\r\n\r\n return (\r\n   <div className={`App ${darkMode ? 'dark-mode' : ''}`} style={{ height: '100vh' }}>\r\n     <div className='option-wrap'>\r\n       <div className='option-title'>\r\n         <div className='option-switch'>\r\n           <button id = 'undoButton' onClick={undoLastLine}>Undo Last Line</button>\r\n           <button id=\"modeSwitch\" onClick={toggleDarkMode}>{darkMode ? 'Light Mode' : 'Dark Mode'}</button>\r\n         </div>\r\n         <h1 className=\"title\">ColorTaiko!</h1>\r\n       </div>\r\n       <div className='input-wrap'>\r\n       <div>\r\n           <div className=\"input-container\">\r\n             <label htmlFor=\"top-vertices\">Top Vertices:</label>\r\n             <input\r\n               id=\"top-vertices\"\r\n               value={topVertices}\r\n               min={MIN_VERTICES}\r\n               max={MAX_VERTICES}\r\n               maxLength={2}\r\n               onChange={(e) => {\r\n                 const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\r\n                 setTopVertices(newValue);\r\n               }}\r\n             />\r\n             <button onClick={() => setTopVertices(Math.min(topVertices + 1, MAX_VERTICES))}>+</button>\r\n             <button onClick={() => setTopVertices(Math.max(topVertices - 1, MIN_VERTICES))}>-</button>\r\n           </div>\r\n           <div className=\"input-container\">\r\n             <label htmlFor=\"bottom-vertices\">Bottom Vertices:</label>\r\n             <input\r\n               id=\"bottom-vertices\"\r\n               type=\"number\"\r\n               value={bottomVertices}\r\n               min={MIN_VERTICES}\r\n               max={MAX_VERTICES}\r\n               maxLength={2}\r\n               onChange={(e) => {\r\n                 const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\r\n                 setBottomVertices(newValue);\r\n               }}\r\n             />\r\n             <button onClick={() => setBottomVertices(Math.min(bottomVertices + 1, MAX_VERTICES))}>+</button>\r\n             <button onClick={() => setBottomVertices(Math.max(bottomVertices - 1, MIN_VERTICES))}>-</button>\r\n           </div>\r\n         </div>\r\n         <div>\r\n           {/* <div className=\"input-container\">\r\n               <label htmlFor=\"top-vertices\">Line style:</label>\r\n               <select defaultValue={lineStyle} onChange={(e) => {\r\n                 setLineStyle(e.target.value)\r\n               }}>\r\n                 {\r\n                   lineStyles().map((lineItem) => {\r\n                     return <option key={lineItem.key} value={lineItem.key}>{lineItem.name}</option>\r\n                   })\r\n                 }\r\n               </select>\r\n             </div> */}\r\n         </div>\r\n         <div>\r\n           <div className=\"input-container\">\r\n             <label htmlFor=\"top-vertices\">Line width:</label>\r\n             <select defaultValue={lineWidth} onChange={(e) => {\r\n               setLineWidth(e.target.value)\r\n             }}>\r\n               {lineWidths.map(width => {\r\n                 return <option key={width + 'width'} value={width}>{width}</option>\r\n               })}\r\n             </select>\r\n           </div>\r\n           {/* <div className=\"input-container\">\r\n             <label htmlFor=\"top-vertices\">Line color:</label>\r\n             <input type='color' value={lineColor} onChange={(e) => {\r\n               setLineColor(e.target.value)\r\n             }} />\r\n           </div> */}\r\n         </div>\r\n       </div>\r\n     </div>\r\n     <div className='svg-content'>\r\n       <ReactFlow\r\n         nodes={nodes}\r\n         edges={edges}\r\n         edgeTypes={edgeTypes}\r\n         connectionLineType={ConnectionLineType.Straight}\r\n         // onInit={setRfInstance}\r\n         onNodesChange={onNodesChange}\r\n         onEdgesChange={onEdgesChange}\r\n         onConnect={onConnect}\r\n         onConnectStart={() => {\r\n           const initColor = generateRandomColor()\r\n           setLineColor(initColor)\r\n         }}\r\n         autoPanOnConnect={false} // cannot move after connecting\r\n         panOnDrag={false}\r\n         nodesDraggable={false}\r\n         nodesFocusable={false}\r\n         zoomOnScroll={false}\r\n         zoomOnPinch={false}\r\n         zoomOnDoubleClick={false}\r\n         connectionMode={ConnectionMode.Loose}\r\n         nodeTypes={nodeTypes}\r\n         onEdgeClick={(e, node) => {\r\n           // change the lines you selected here\r\n           console.log(e, node)\r\n         }}\r\n         connectionLineStyle={{\r\n           stroke: lineColor,\r\n           strokeWidth: lineWidth,\r\n           ...(lineStyles().find((style) => style.key === lineStyle).wrapStyle)\r\n           // strokeDasharray: '5, 5'\r\n         }}\r\n         // viewportInitialized={false}\r\n       />\r\n\r\n       {/* Render the error modal if there's an error message */}\r\n       {errorMessage && <ErrorModal message={errorMessage} onClose={closeModal} />}\r\n     </div>\r\n    \r\n   </div>\r\n );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}